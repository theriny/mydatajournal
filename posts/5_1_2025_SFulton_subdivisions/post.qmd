---
title: "Part 1: Exploring Fulton County's Subdivision Data"
date: '2025-05-01'
categories: [python,housing development, realestate]
description: 'Exploring subdivision data as it relates to the shape area and length of the subdivisions'
image: output_43_1.png
code-fold: show

---



This is part 1 of a 2- (maybe 3) series analysis of **Fulton County, Georgia's** subdivisions, where the only metrics recorded are **shape area** and **shape length**üìêüìè (A little more detail about those metrics later in the analysis). Doesn't seem like a very interesting dataset at first glanceü•∏, but I always uncover interesting and unexpected nuggetsü™ô of information from seemingly dull datasets. So, if I find a rabbit hole, let's hope it's a fun one.üê∞

I'm going to start the first part of the series from far outüõ∞Ô∏è (basic statistics) and gradually hone in for a more nuanced analysisüî¨ as the series progresses and I begin to ask questions about the data that is relevant to my own location in **South Fulton**.

I'm going to place this series in **Housing and Development**üèòÔ∏è, so readers who are experts or simply enthusiasts of the field can feel free to offer suggestions, comments, and any version of personal opinion on the matter. I'd love to hear other takes and approaches to extracting meaning from this type of dataset.

Happy Exploring! üèîÔ∏è


Data Source: https://gisdata.fultoncountyga.gov/
GitHub Repo: https://github.com/theriny/fultoncounty_subdivisions

### Get Dependencies


```python
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
```

### Read Data


```python
df = pd.read_csv('Subdivisions.csv')
```


```python
df.describe()
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>OBJECTID</th>
      <th>YearRecorded</th>
      <th>DocBook</th>
      <th>DocPage</th>
      <th>Shape__Area</th>
      <th>Shape__Length</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>count</th>
      <td>3677.000000</td>
      <td>1823.000000</td>
      <td>83.000000</td>
      <td>83.000000</td>
      <td>3.675000e+03</td>
      <td>3675.000000</td>
    </tr>
    <tr>
      <th>mean</th>
      <td>2081.452543</td>
      <td>2002.259462</td>
      <td>313.493976</td>
      <td>79.000000</td>
      <td>1.107878e+06</td>
      <td>4214.630614</td>
    </tr>
    <tr>
      <th>std</th>
      <td>1918.580076</td>
      <td>26.901355</td>
      <td>131.934978</td>
      <td>41.136596</td>
      <td>2.252761e+06</td>
      <td>3748.502907</td>
    </tr>
    <tr>
      <th>min</th>
      <td>1.000000</td>
      <td>978.000000</td>
      <td>99.000000</td>
      <td>1.000000</td>
      <td>3.198242e-02</td>
      <td>16.750267</td>
    </tr>
    <tr>
      <th>25%</th>
      <td>941.000000</td>
      <td>1995.000000</td>
      <td>183.500000</td>
      <td>44.000000</td>
      <td>1.702545e+05</td>
      <td>1867.852593</td>
    </tr>
    <tr>
      <th>50%</th>
      <td>1876.000000</td>
      <td>2004.000000</td>
      <td>333.000000</td>
      <td>75.000000</td>
      <td>5.075356e+05</td>
      <td>3355.910444</td>
    </tr>
    <tr>
      <th>75%</th>
      <td>2799.000000</td>
      <td>2013.000000</td>
      <td>445.500000</td>
      <td>114.500000</td>
      <td>1.218273e+06</td>
      <td>5457.816465</td>
    </tr>
    <tr>
      <th>max</th>
      <td>14872.000000</td>
      <td>2023.000000</td>
      <td>464.000000</td>
      <td>148.000000</td>
      <td>4.476438e+07</td>
      <td>55177.479838</td>
    </tr>
  </tbody>
</table>
</div>



This dataset contains the **shape area** and **shape length** of subdivisions for various cities in Fulton County, Georgia that span from **978** to 2023. **978**!?!?üò≤ It seems we may have a typo. Let's look at the unique years that were recorded.

### A little tidying up

Yea, let's change 978 to 1978. How many times was this typo made?


```python
df[df['YearRecorded'] == 978.]
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>OBJECTID</th>
      <th>SubdivName</th>
      <th>CreatedBy</th>
      <th>CreateDate</th>
      <th>Editor</th>
      <th>LastEdit</th>
      <th>City</th>
      <th>FeatureID</th>
      <th>YearRecorded</th>
      <th>DocBook</th>
      <th>DocPage</th>
      <th>DocType</th>
      <th>Shape__Area</th>
      <th>Shape__Length</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>3642</th>
      <td>13636</td>
      <td>Cameron Crest Farms</td>
      <td>STEPHANIE.YANCEY</td>
      <td>2023/10/17 12:07:11+00</td>
      <td>STEPHANIE.YANCEY</td>
      <td>2023/10/17 12:08:24+00</td>
      <td>Johns Creek</td>
      <td>LSD0000413</td>
      <td>978.0</td>
      <td>113.0</td>
      <td>4.0</td>
      <td>PL</td>
      <td>5.919767e+06</td>
      <td>11584.65774</td>
    </tr>
  </tbody>
</table>
</div>



Only once on row 3642. So let's make a quick fix using pandas *.loc* function.


```python
# replace 978 in row 3642 with 1978
df.loc[3642,'YearRecorded'] = 1978
```


```python
#sort record dates
np.sort(df['YearRecorded'].unique())
```




    array([1939., 1961., 1968., 1970., 1971., 1972., 1973., 1974., 1975.,
           1976., 1977., 1978., 1979., 1980., 1981., 1982., 1983., 1984.,
           1985., 1986., 1987., 1988., 1989., 1990., 1991., 1992., 1993.,
           1994., 1995., 1996., 1997., 1998., 1999., 2000., 2001., 2002.,
           2003., 2004., 2005., 2006., 2007., 2008., 2009., 2010., 2011.,
           2012., 2013., 2014., 2015., 2016., 2017., 2018., 2019., 2020.,
           2021., 2022., 2023.,   nan])



Since the **YearRecorded** field will be used later down the line, I want to remove any rows with *nan* in this column. How many of these rows are there?


```python
(df[np.isnan(df['YearRecorded']) == True].shape[0])/df.shape[0]
```




    0.5042153929834103




```python
df.shape
```




    (3677, 14)



That's 50% of the dataset üò≤. Now, there are two columns in the dataset: **CreateDate** and **LastEdit**, which have the same date value and seem to be dates related to when the editor of the dataset, Stephanie Yancey (Column: **CreatedBy**) edited or entered the data, so not necessarily the original date of when the information was first recorded. I could replace the *nan* dates of **YearRecorded** with one these dates, but that could lead to faulty results when I want to look at things like *what was the average subdivision shape area in 2023?*, since the majority of Stephanie Yancey's edits were in 2023.

Sooo, I'm going to remove the nan rows (*for now*).


```python
# remove rows where YearRecorded is nan
df = df[np.isnan(df['YearRecorded']) != True]
```


```python
# confirm rows were removed
df.shape
```




    (1823, 14)



Let's also convert **shape area** from square-feet to acres. I'm guessing the current values for shape area are in square feet, and shape length is in feet. üìèüìê


```python
# convert square feet to acres (43,560 square feet is 1 acre)
df['Shape__Area'] = df['Shape__Area'].apply(lambda x: x/43560.0)
```

### Exploration üß≠üîç

Awesome!üôÜüèæ So, the subdivision shape area and length data recordings range from 1939 to 2023. I'm curious to know if the area and/or length of a subdivision can change over time. I'm sure it can if say, a subdivision is rezoned due to home reductions or additions, but I want to know if those events are captured in the data. I'll create a function that will essentially:
1. Determine if a subdivision name is in more than one row of the dataset.üí≠(duplicate entry OR same subdiv name but different city OR same subdiv name and city but different shape area/length and record dates (the gold ü™ô)
2. Determine if the subdivision's city is the same for each additional appearance of the subdivision (if it's not, this probably means the cities have subdivisions with the same name, which is common) üí≠
3. The function will return a table that lists all subdivisions that meet the above criteria.üí≠


```python
# üßëüèæ‚ÄçüíªCreate function that finds subdivisions with more than 1 record where the measurement and/or year are different between the records

def Subdivisions_With_Updates(dataframe):
    
    
    # create empty lists to capture city, year, shape, subdivname
    city = []
    year = []
    shape = []
    subdivname = []
    
    
    for subdiv in dataframe['SubdivName'].unique():
        
        # get subset of dataframe only containing current subdivision
        uniqueSubs = dataframe[dataframe['SubdivName'] == subdiv]
        
        # get the unique cities associated with current subdivision
        uniqueCity = dataframe[dataframe['SubdivName'] == subdiv]['City'].unique()
        
        if (len(uniqueSubs) > 1) & (len(uniqueCity) == 1): #if the subdivision appears more than once and there is one unique city, this indicates a change in the subdivisions recorded area/length
            for i in range(0,len(uniqueSubs)):
                uniqueSubs = uniqueSubs.reset_index(drop=True) # reset index
                subdivname.append(uniqueSubs['SubdivName'][i])
                city.append(uniqueSubs['City'][i])
                year.append(uniqueSubs['YearRecorded'][i])
                shape.append(uniqueSubs['Shape__Area'][i])
            
        else:
            None
    results = pd.DataFrame({'SubDivName': subdivname, 'City': city, 'Year': year, 'Shape Area': shape})
    
    return results      
```


```python
# Run the function and save results to 'results' variable
results = Subdivisions_With_Updates(df)
```


```python
results.head()
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>SubDivName</th>
      <th>City</th>
      <th>Year</th>
      <th>Shape Area</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>DPMS Builders LLC Phase 3</td>
      <td>Atlanta</td>
      <td>2017.0</td>
      <td>0.246343</td>
    </tr>
    <tr>
      <th>1</th>
      <td>DPMS Builders LLC Phase 3</td>
      <td>Atlanta</td>
      <td>2016.0</td>
      <td>1.868496</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Overton Hills</td>
      <td>Sandy Springs</td>
      <td>1978.0</td>
      <td>17.816186</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Overton Hills</td>
      <td>Sandy Springs</td>
      <td>1978.0</td>
      <td>15.884354</td>
    </tr>
    <tr>
      <th>4</th>
      <td>Cameron Crest Farms</td>
      <td>Johns Creek</td>
      <td>1978.0</td>
      <td>219.386157</td>
    </tr>
  </tbody>
</table>
</div>




```python
# get unique subdivisions whose shape area has at some point in time
len(list(results['SubDivName'].unique()))
```




    15




```python
# get unique subdivisions in dataset
df.groupby(by=['SubdivName','City']).ngroups
```




    1791




```python
len(list(df['SubdivName'].unique()))
```




    1803



We can see üôà that 21 of the subdivisions' shape size has changed at some point in time. Thats 21 out of 3,628 unique subdivisions in the dataset (taking into account that some cities share subdivivision names)...That's less than 1%ü§èüèæ. This indicates that subdivisions are rarely reduced or increased in size after they have been developed (in Fulton County, GA).

I'm also curious to know if the average shape area of subdivisions has evolved over the years.


```python
# calculate the average subdivision shape area for each year
shapeArea_perYear = df.groupby(by=['YearRecorded']).agg({'Shape__Area': 'mean'})
```


```python
plt.bar(shapeArea_perYear.index,shapeArea_perYear.Shape__Area)
plt.ylabel('Shape Area (acres)')
plt.xlabel('YearRecorded')
```




    Text(0.5, 0, 'YearRecorded')




    
![png](output_32_1.png)
    


It's interesting to note that there was a 20-year gap between 1940 and 1960 where no data was reported. üòØ

What subdivisions existed in 1939 in Fulton County, GA???


```python
df[df['YearRecorded'] == 1939.0]
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>OBJECTID</th>
      <th>SubdivName</th>
      <th>CreatedBy</th>
      <th>CreateDate</th>
      <th>Editor</th>
      <th>LastEdit</th>
      <th>City</th>
      <th>FeatureID</th>
      <th>YearRecorded</th>
      <th>DocBook</th>
      <th>DocPage</th>
      <th>DocType</th>
      <th>Shape__Area</th>
      <th>Shape__Length</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2923</th>
      <td>2965</td>
      <td>Broad Subdivision</td>
      <td>CHRIS.MCMILLER</td>
      <td>2019/03/28 14:36:37+00</td>
      <td>STEPHANIE.YANCEY</td>
      <td>2023/09/28 10:44:07+00</td>
      <td>South Fulton</td>
      <td>LSD0000329</td>
      <td>1939.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>200.350853</td>
      <td>20924.700663</td>
    </tr>
  </tbody>
</table>
</div>



**Broad Subdivision**ü§î I'm guessing this is a collection of subdivisions rolled into a single datapoint because it's just weird to think a single subdivision was that large in 1939 and non-existent 20 years later after no data was recorded for 20 years. It's fair to say data recording didn't become more consistent until the 1970's, so it might be fair cut datapoints earlier than 1970 moving forward. There are, however, additional peaks in shape area for 4 or 5 of the years after 1970 that should be investigated.

What about subdivision shape length?


```python
#calculate average subdivision shape length per year
shapeLength_perYear = df.groupby(by='YearRecorded').agg({'Shape__Length':'mean'})

plt.bar(shapeLength_perYear.index,shapeLength_perYear.Shape__Length)
plt.xlabel('YearRecorded')
plt.ylabel('Shape Length (ft)')
```




    Text(0, 0.5, 'Shape Length (ft)')




    
![png](output_38_1.png)
    


Let's end the first part of the series by looking at the **top 5Ô∏è‚É£** subdivisions with the largest shape areas. But lets first remove any recordings **before 1970**.


```python
# get records from 1970 and up
df_post1970 = df[df['YearRecorded'] > 1969.0]
```


```python
sorted_post1970 = df_post1970.sort_values(by='Shape__Area',ascending=False)
```


```python
sorted_post1970.head()
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>OBJECTID</th>
      <th>SubdivName</th>
      <th>CreatedBy</th>
      <th>CreateDate</th>
      <th>Editor</th>
      <th>LastEdit</th>
      <th>City</th>
      <th>FeatureID</th>
      <th>YearRecorded</th>
      <th>DocBook</th>
      <th>DocPage</th>
      <th>DocType</th>
      <th>Shape__Area</th>
      <th>Shape__Length</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>518</th>
      <td>539</td>
      <td>Martins Landing/Lakeview Homes</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>STEPHANIE.YANCEY</td>
      <td>2023/09/28 10:44:07+00</td>
      <td>Roswell</td>
      <td>LSD0001546</td>
      <td>1981.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>1027.648744</td>
      <td>34842.968347</td>
    </tr>
    <tr>
      <th>3373</th>
      <td>3415</td>
      <td>Horseshoe Bend</td>
      <td>DALU.FAB-UKOZOR</td>
      <td>2020/07/30 14:08:32+00</td>
      <td>STEPHANIE.YANCEY</td>
      <td>2023/09/28 10:44:07+00</td>
      <td>NaN</td>
      <td>LSD0001239</td>
      <td>1994.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>860.696880</td>
      <td>40867.862487</td>
    </tr>
    <tr>
      <th>461</th>
      <td>482</td>
      <td>Willow Springs</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>STEPHANIE.YANCEY</td>
      <td>2023/09/28 10:44:07+00</td>
      <td>Roswell</td>
      <td>LSD0002852</td>
      <td>1985.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>581.907403</td>
      <td>26407.221626</td>
    </tr>
    <tr>
      <th>668</th>
      <td>689</td>
      <td>Saddle Creek</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>STEPHANIE.YANCEY</td>
      <td>2023/09/28 10:44:07+00</td>
      <td>Roswell</td>
      <td>LSD0002204</td>
      <td>1985.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>431.206870</td>
      <td>18912.245659</td>
    </tr>
    <tr>
      <th>2640</th>
      <td>2682</td>
      <td>Cedar Grove Village Phase 1 Section A</td>
      <td>CHRIS.MCMILLER</td>
      <td>2018/12/20 12:25:46+00</td>
      <td>STEPHANIE.YANCEY</td>
      <td>2023/09/28 10:54:34+00</td>
      <td>South Fulton</td>
      <td>LSD0000483</td>
      <td>2003.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>377.121148</td>
      <td>21131.509310</td>
    </tr>
  </tbody>
</table>
</div>




```python
sns.barplot(data=sorted_post1970.iloc[:5], x = 'SubdivName',y= 'Shape__Area')
plt.ylabel('Shape Area (acres)')
plt.xlabel('Subdivision')
plt.xticks(rotation=90)
```




    (array([0, 1, 2, 3, 4]),
     [Text(0, 0, 'Martins Landing/Lakeview Homes'),
      Text(1, 0, 'Horseshoe Bend'),
      Text(2, 0, 'Willow Springs'),
      Text(3, 0, 'Saddle Creek'),
      Text(4, 0, 'Cedar Grove Village Phase 1 Section A')])




    
![png](output_43_1.png)
    


And, that is an interesting place to end. The 5th largest subdivision shape area happens to be the subdivision I live in, at about 400 acres! üò≤üôÇ

The next installment to this series is coming soon. Until then, Happy Exploring.

